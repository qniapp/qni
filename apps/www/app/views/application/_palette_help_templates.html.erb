<template id="h-gate-help">
  <header>
    <h1>Hadamard Gate</h1>
    <p>Creates simple superpositions.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [0.7071, 0.7071], operation: 'H', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [0.7071, -0.7071], operation: 'H', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="x-gate-help">
  <header>
    <h1>NOT Gate (Pauli X Gate)</h1>
    <p>Swaps the qubit pair of <code>|0⟩</code> and <code>|1⟩</code>.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [0, 1], operation: 'X', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [1, 0], operation: 'X', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="y-gate-help">
  <header>
    <h1>Pauli Y Gate</h1>
    <p>A combination of the X and Z gates.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [0, 'i'], operation: 'Y', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: ['-i', 0], operation: 'Y', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="z-gate-help">
  <header>
    <h1>Pauli Z Gate</h1>
    <p>Negate phases when the qubit is ON.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [1, 0], operation: 'Z', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [0, -1], operation: 'Z', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="phase-gate-help">
  <header>
    <h1>Phase Gate</h1>
    <p>Applies a phase of e<sup>iφ</sup> to the <code>|1⟩</code> state.</p>
    <p>The default φ = π/2.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [1, 0], operation: 'PHASE', angle: 'π/2', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [0, 'i'], operation: 'PHASE', angle: 'π/2', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="t-gate-help">
  <header>
    <h1>T Gate</h1>
    <p>A shortcut for <code>π/4</code> Phase gate.</p>
    <p>Applies a phase of e<sup>iπ/4</sup> to the <code>|1⟩</code> state.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [1, 0], operation: 'T', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [0, '0.7071 + 0.7071i'], operation: 'T', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="rnot-gate-help">
  <header>
    <h1>Square Root of NOT Gate</h1>
    <p>Rotates around the X-axis by <code>π/2</code>.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: ['0.5 + 0.5i', '0.5 - 0.5i'], operation: 'RNOT', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: ['0.5 - 0.5i', '0.5 + 0.5i'], operation: 'RNOT', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="rx-gate-help">
  <header>
    <h1>Rx Gate</h1>
    <p>Rotates around the X-axis by the angle θ.</p>
    <p>The default θ = π/2.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [0.7071, '-0.7071i'], operation: 'RX', angle: 'π/2', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: ['-0.7071i', 0.7071], operation: 'RX', angle: 'π/2', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="ry-gate-help">
  <header>
    <h1>Ry Gate</h1>
    <p>Rotates around the Y-axis by the angle θ.</p>
    <p>The default θ = π/2.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [0.7071, 0.7071], operation: 'RY', angle: 'π/2', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [-0.7071, 0.7071], operation: 'RY', angle: 'π/2', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="rz-gate-help">
  <header>
    <h1>Rz Gate</h1>
    <p>Rotates around the Z-axis by the angle θ.</p>
    <p>The default θ = π/2.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: ['0.7071 - 0.7071i', 0], operation: 'RZ', angle: 'π/2', dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [0, '0.7071 + 0.7071i'], operation: 'RZ', angle: 'π/2', dark_mode: true) %>
    </div>
  </div>
</template>

<template id="qft-gate-help">
  <header>
    <h1>Quantum Fourier Transform Gate</h1>
    <p>Transforms to/from phase frequency space.</p>
  </header>
</template>

<template id="qft-dagger-gate-help">
  <header>
    <h1>Inverse Quantum Fourier Transform Gate</h1>
    <p>Transforms to/from phase frequency space.</p>
  </header>
</template>

<template id="swap-gate-help">
  <header>
    <h1>Swap Gate</h1>
    <p>Swap the values of two qubits.</p>
    <p>(Place two in the same step.)</p>
  </header>
</template>

<template id="control-gate-help">
  <header>
    <h1>Control Gate</h1>
    <p>Conditions on a qubit being ON.</p>
    <p>Gates in the same step only apply to states meeting the condition.</p>
  </header>
</template>

<template id="anti-control-gate-help">
  <header>
    <h1>Anti Control Gate</h1>
    <p>Conditions on a qubit being OFF.</p>
    <p>Gates in the same step only apply to states meeting the condition.</p>
  </header>
</template>

<template id="bloch-display-help">
  <header>
    <h1>Bloch Sphere Display</h1>
    <p>Shows a wire's local state as a point on the Bloch sphere.</p>
  </header>
</template>

<template id="write0-gate-help">
  <header>
    <h1><code>|0⟩</code> Operation</h1>
    <p>(Re)sets a qubit to state <code>|0⟩</code>.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [1, 0], operation: 'WRITE', value: 0, dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [1, 0], operation: 'WRITE', value: 0, dark_mode: true) %>
    </div>
  </div>
</template>

<template id="write1-gate-help">
  <header>
    <h1><code>|1⟩</code> Operation</h1>
    <p>(Re)sets a qubit to state <code>|1⟩</code>.</p>
  </header>

  <div class="body">
    <div class="flex flex-col space-y-2">
      <%= render QubitTransitionComponent.new(from: [1, 0], to: [0, 1], operation: 'WRITE', value: 1, dark_mode: true) %>
      <%= render QubitTransitionComponent.new(from: [0, 1], to: [0, 1], operation: 'WRITE', value: 1, dark_mode: true) %>
    </div>
  </div>
</template>

<template id="measurement-gate-help">
  <header>
    <h1>Measurement Gate</h1>
    <p>Measures whether a qubit is ON or OFF.</p>
  </header>
</template>

<template id="spacer-gate-help">
  <header>
    <h1>Spacer Gate</h1>
    <p>A gate with no effect.</p>
  </header>
</template>
